FileTree bndtoolsBundleFiles = fileTree(dir: 'bndtools', include: '**/dist/bundles/**/*.jar', exclude: '**/*latest.jar')
FileTree gradleBundleFiles = fileTree(dir: 'gradle', include: '**/libs/*.jar')
FileTree liferayGradleBundleFiles = fileTree(dir: 'liferay-gradle', include: '**/libs/*.jar')
FileTree liferayWorkspaceBundleFiles = fileTree(dir: 'liferay-workspace/modules', include: '**/libs/*.jar')
FileTree mavenBundleFiles = fileTree(dir: 'maven', include: '**/target/*.jar')

int canonicalBundleFilesSize = liferayGradleBundleFiles.size()

task bundleFilesSizeTest << {
	assert canonicalBundleFilesSize == bndtoolsBundles.size()
	assert canonicalBundleFilesSize == gradleBundles.size()
	assert canonicalBundleFilesSize == liferayWorkspaceBundles.size()
	assert canonicalBundleFilesSize == mavenBundles.size()
}

FileTree gradleWars = fileTree(dir: 'gradle', include: '**/libs/*.war')
FileTree liferayWorkspaceWars = fileTree(dir: 'liferay-workspace/wars', include: '**/libs/*.war')
FileTree liferayGradleWars = fileTree(dir: 'liferay-gradle', include: '**/libs/*.war')
FileTree mavenWars = fileTree(dir: 'maven', include: '**/target/*.war')

int canonicalWarsSize = liferayGradleWars.size()

task warsSizeTest << {
	assert canonicalWarsSize == gradleWars.size()
	assert canonicalWarsSize == liferayGradleWars.size()
	assert canonicalWarsSize == liferayWorkspaceWars.size()
}

task bundleFilesSortTest << {
	def fileNamesDiff = liferayGradleBundleFiles.files.name.sort() - gradleBundleFiles.files.name.sort()
	assert [] == fileNamesDiff : "liferay-gradle vs gradle"

	fileNamesDiff = liferayGradleBundleFiles.files.name.sort() - bndtoolsBundleFiles.files.name.sort()
	assert [] == fileNamesDiff : "liferay-gradle vs bndtools"

	fileNamesDiff = liferayGradleBundleFiles.files.name.sort() - liferayWorkspaceBundleFiles.files.name.sort()
	assert [] == fileNamesDiff : "liferay-gradle vs liferay-workspace"

	fileNamesDiff = liferayGradleBundleFiles.files.name.sort() - mavenBundleFiles.files.name.sort()
	assert [] == fileNamesDiff : "liferay-gradle vs maven"
}

task bundleFilesTest << {}

bundleFilesTest.dependsOn bundleFilesSizeTest
bundleFilesTest.dependsOn bundleFilesSortTest

task warFilesTest << {}

warFilesTest.dependsOn warsSizeTest

task replicateSources << {
	Closure projectFilter = {
		it.isDirectory() && it.name.startsWith("blade") && !it.name.matches("\\..*")
	}

	def canonicalSource

	if (project.hasProperty('sourceProjectProp')) {
		canonicalSource = sourceProjectProp
	}
	else {
		canonicalSource = 'liferay-gradle'
	}

	def canonicalProjects = file(canonicalSource).listFiles().findAll(projectFilter)
	def replicationParents = files(['bndtools', 'gradle', 'liferay-gradle', 'liferay-workspace/modules', 'maven'] - canonicalSource)

	canonicalProjects.each { canonicalProject ->
		if ((new File(canonicalProject, "bnd.bnd").exists())) {
			replicationParents.each { replicationParent ->
				def replicationProjects = replicationParent.listFiles().findAll(projectFilter)

				def replicationProject = replicationProjects.find{ it.name == canonicalProject.name }

				if (replicationProject == null) {
					replicationProject = new File(replicationParent, canonicalProject.name)
					replicationProject.mkdirs()

					def buildFilesProject = new File(replicationParent, "blade.portlet.jsp")

					ant.copy(todir: replicationProject) {
						fileset(dir: buildFilesProject, includes: "*")
					}
				}

				ant.copy(todir: replicationProject) {
					fileset(dir: canonicalProject, includes: "*.markdown")
				}

				def replicationSrc = new File( replicationProject, 'src/' )

				replicationSrc.deleteDir()

				def canonicalSrc = new File( canonicalProject, 'src/' )

				ant.copy(todir: replicationSrc) {
					fileset(dir: canonicalSrc, includes: "**")
				}
			}
		}
	}
}

configurations {
	bnd
}

dependencies {
	bnd group: "biz.aQute.bnd", name: "biz.aQute.bnd", version: "3.1.0"
}

repositories {
	mavenCentral()
}

task diff << {
	def errorList = []

	[bndtoolsBundleFiles, gradleBundleFiles, liferayWorkspaceBundleFiles, mavenBundleFiles].each { replicationFiles ->
		replicationFiles.each { replicationFile ->

			def liferayGradleOutputFile = liferayGradleBundleFiles.find {
				it.name == replicationFile.name
			}

			String exclusions = "*pom.properties, *pom.xml, Archiver-Version, Built-By, Build-Jdk, Javac-Debug, Javac-Deprecation, Javac-Encoding"

			def os = new ByteArrayOutputStream()

			javaexec {
				args "diff", "-i", "${exclusions}", replicationFile, liferayGradleOutputFile

				classpath = configurations.bnd
				main = "aQute.bnd.main.bnd"
				standardOutput = os
			}

			def errorOutput = os.toString()

			if (errorOutput) {
				errorList.add("${replicationFiles} - ${replicationFile.name} \n" + errorOutput)
			}
		}
	}

	if (!errorList.empty) {
		throw new GradleException(errorList.toListString())
	}
}
